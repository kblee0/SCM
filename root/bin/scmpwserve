#!/usr/bin/perl

use lib "$ENV{'SCM_ROOT'}/lib/perl";

use Dancer(':script');
use SCM::Ini;
use SCM::UTIL;

use strict;
use warnings;

our ($SCM_PWSERVER_PORT, $SCM_REPO_PATH);

#########################################################
# RESTfull API
#########################################################
hook before => sub {
	debug request->method . ' ' . request->uri;
};

post '/scm/svnserve/v1/:repo/user/:userid/add' => sub{

	my $json = request->body;
	my $req  = from_json( $json );

	my $result = {};

	my $rc = set_user_passwd( params->{'repo'}, params->{'userid'}, $req->{'passwd'}, 1 );
	if( $rc == 0 ) {
		$result = {
			repository => params->{'repo'},
			user       => params->{'userid'},
			resultCode => $rc,
		};
	}
	else {
		$result = {
			resultCode => $rc,
		};
	}

	return $result;
};

put '/scm/svnserve/v1/:repo/user/:userid/changepasswd' => sub{

	my $json = request->body;
	my $req  = from_json( $json );

	my $result = {};

	my $rc = set_user_passwd( params->{'repo'}, params->{'userid'}, $req->{'passwd'}, 0 );
	if( $rc == 0 ) {
		$result = {
			repository => params->{'repo'},
			user       => params->{'userid'},
			resultCode => $rc,
		};
	}
	else {
		$result = {
			resultCode => $rc,
		};
	}

	return $result;
};

put '/scm/svnserve/v1/:repo/user/:userid/checkpasswd' => sub{

	my $json = request->body;
	my $req  = from_json( $json );

	my $result = {};

	my $rc = check_user_passwd( params->{'repo'}, params->{'userid'}, $req->{'passwd'} );
	if( $rc == 0 ) {
		$result = {
			repository => params->{'repo'},
			user       => params->{'userid'},
			resultCode => $rc,
		};
	}
	else {
		$result = {
			resultCode => $rc,
		};
	}

	return $result;
};

get '/scm/svnserve/v1/:repo/user/:userid' => sub{

	my $result = {};

	my $rc = check_user_exist( params->{'repo'}, params->{'userid'} );
	if( $rc == 0 ) {
		$result = {
			repository => params->{'repo'},
			user       => params->{'userid'},
			resultCode => $rc,
		};
	}
	else {
		$result = {
			resultCode => $rc,
		};
	}

	return $result;
};


sub usage {
    print "
Usage: scmpwserve [options]

Options:
  -d      : daemon mode
  -p ARG  : listen port
  -r ARG  : root of directory to serve

";
    exit( 9 );
}


sub init_server {
	use Getopt::Std;
	my $opt_string = 'dp:r:';
	my %opt;

	getopts( "$opt_string", \%opt ) or usage();

	usage() unless( defined $opt{p} and defined $opt{r} );

	($SCM_PWSERVER_PORT, $SCM_REPO_PATH) = ($opt{p},$opt{r});

	daemon_init() if defined $opt{d};
}

sub get_passwd_db {
	my ($repo) = @_;
	
	my $conf_path;
	
	if( defined $repo ) {
		$conf_path = "$SCM_REPO_PATH/$repo/conf";
	}
	else {
		$conf_path = "$SCM_REPO_PATH/conf";
	}
	
	if( not -r "$conf_path/svnserve.conf" ) {
		return undef;
	}
	my $svnconf = new SCM::Ini("$conf_path/svnserve.conf");
	
	my $passwd_db = $svnconf->get_entry_setting('general','password-db');

	if( not defined $passwd_db ) {
		return undef;
	}
	
	if( $passwd_db =~ /^\// ) {
		return $passwd_db;
	}
	return "$conf_path/$passwd_db";
}

sub check_user_passwd {
	my ($repo, $user, $passwd) = @_;

	my $passwdfile = get_passwd_db( $repo );
	if( not defined $passwdfile or not -w $passwdfile ) {
		return 9;
	}

	my $ini = new SCM::Ini($passwdfile);
	my $db_passwd = $ini->get_entry_setting( 'users', $user );

	if( not defined $db_passwd ) {
		return 1;
	}
	elsif( $db_passwd ne $passwd ) {
		return 2;
	}
	return 0;
}

sub check_user_exist {
	my ($repo, $user) = @_;

	my $passwdfile = get_passwd_db( $repo );
	if( not defined $passwdfile or not -w $passwdfile ) {
		return 9;
	}

	my $ini = new SCM::Ini($passwdfile);

	if( defined  $ini->get_entry_setting( 'users', $user ) ) {
		return 0;
	}
	return 1;
}

sub set_user_passwd {
	my ($repo, $user, $passwd, $addflag) = @_;

	my $passwdfile = get_passwd_db( $repo );
	if( not defined $passwdfile or not -w $passwdfile ) {
		return 9;
	}

	my $ini = new SCM::Ini($passwdfile);

	if( $addflag ) {
		if( defined  $ini->get_entry_setting( 'users', $user ) ) {
			return 1;
		}
	}
	else {
		if( not defined  $ini->get_entry_setting( 'users', $user ) ) {
			return 1;
		}
	}
	$ini->set_entry_setting( 'users', $user, $passwd );
	
	$ini->write_settings($passwdfile);

	return 0;
}

init_server;

set 'content_type' => 'application/json';
set 'port'         => $SCM_PWSERVER_PORT;
set 'serializer'   => 'JSON';
set 'show_errors'  => 1;
set 'startup_info' => 0;
set 'warnings'     => 1;
set 'environment'  => 'scmpwserve';
set 'log_path'     => $ENV{SCM_MHOME} . '/log/scmpwserve';
set 'log_file'     => 'scmpwserve.log';
set 'logger_format'=> '[%T]%i %m';
set 'log'          => 'debug';
set 'logger'       => 'file';

# Start dancer framework
dance;

