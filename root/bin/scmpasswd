#!/bin/ksh  -- # -*- perl -*-
eval 'exec perl -S $0 ${1+"$@"}'
if 0;

use strict;
use warnings;

use lib "$ENV{'SCM_ROOT'}/lib/perl";

use SCM::User;


our ($host, $port);
our ($user, $repo);
our ($cli);

init();

scm_chage_user_password( $user );

sub usage {
	die "Usage: scmpasswd -r <repo-base path> <login id>\n";
}

sub init {
	use Getopt::Std;
	my $opt_string = 'r:';
	my %opt;

	getopts( "$opt_string", \%opt ) or usage();
	usage() unless( $#ARGV == 0 && defined $opt{r});

	($host, $port) = ($ENV{SCM_SERVER_HOST},$ENV{SCM_PWSERVER_PORT});

	($user) = @ARGV;

	$repo = $opt{r};

	my $baseurl = sprintf "http://%s:%d", $ENV{SCM_SERVER_HOST}, $ENV{SCM_PWSERVER_PORT};

	$cli = SCM::User->new( $baseurl, 5 );
}


sub scm_chage_user_password {
	my ($user) = @_;

	$repo = defined $repo ? ($repo) : '';

	my $rc = $cli->find_user( $repo, $user );

	# user not exist
	if( $rc != 0 ) {
		die "Invalid login name.\n";
	}
	
	print "Changing password for $user\n";

	my $passwd = get_passwd_text("Old password: ");
	
	$rc = $cli->check_password( $repo, $user, $passwd );

	if( $rc != 0 ) {
		sleep 1;
		die "Invalid password.\n";
	}
	
	for( my $i = 0; $i < 3; $i++ ) {
		$passwd = get_passwd_text("New password: ");
		if( $passwd ne get_passwd_text("Re-enter new password: ") ) {
			if( $i < 2 ) {
				print "They don't match; try again.\n";
			}
			else {
				die "Too many failures - try later.\n";
			}
		}
		else {
			last;
		}
	}
	
	$rc = $cli->set_password( $repo, $user, $passwd );
	if( $rc == 0 ) {
		print "Passwd successfully changed\n";
	}
	else {
		die "change password error\n";
	}
	
}

sub get_passwd_text {
	my ($prompt) = @_;

	print $prompt;
	#ReadMode ('noecho');
	system("stty", "-echo");
	chomp( my $value = <STDIN> );
	#ReadMode ('restore');
	system("stty", "echo");
	print "\n";

	return $value;
}

